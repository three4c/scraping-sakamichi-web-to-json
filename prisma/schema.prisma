generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model groups {
  id          Int       @id @default(autoincrement())
  order       Int
  ticket_date DateTime?
  user_id     String
  color_id    String
  colors      colors    @relation(fields: [color_id], references: [id])
  users       users     @relation(fields: [user_id], references: [id])

  @@index([user_id, color_id])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id             String     @id
  name           String?
  email          String?    @unique
  email_verified DateTime?
  image          String?
  accounts       accounts[]
  groups         groups[]
  sessions       sessions[]
}

model colors {
  id        String      @id @unique
  name      String
  groups    groups[]
  members   members[]
  schedules schedules[]
  tickets   tickets[]
}

model members {
  id               Int                @id @default(autoincrement())
  name             String
  hiragana         String
  src              String
  href             String
  color_id         String
  member_schedules member_schedules[]
  colors           colors             @relation(fields: [color_id], references: [id])

  @@index([color_id])
}

model tickets {
  id       Int      @id @default(autoincrement())
  href     String
  date     DateTime
  text     String
  color_id String
  colors   colors   @relation(fields: [color_id], references: [id])

  @@index([color_id])
}

model schedules {
  id               Int                @id @default(autoincrement())
  category         String?
  href             String
  text             String
  start_time       String?
  end_time         String?
  date_time        String?
  color_id         String
  date_id          Int
  member_schedules member_schedules[]
  colors           colors             @relation(fields: [color_id], references: [id])
  date_schedules   date_schedules     @relation(fields: [date_id], references: [id], onDelete: Cascade)

  @@index([color_id, date_id])
}

model member_schedules {
  id          Int       @id @default(autoincrement())
  member_id   Int
  schedule_id Int
  members     members   @relation(fields: [member_id], references: [id], onDelete: Cascade)
  schedules   schedules @relation(fields: [schedule_id], references: [id], onDelete: Cascade)

  @@index([member_id, schedule_id])
}

model date_schedules {
  id        Int         @id @default(autoincrement())
  date      DateTime
  schedules schedules[]
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
